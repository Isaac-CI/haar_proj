// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module detectFaces_processImage_Pipeline_VITIS_LOOP_398_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        sum_col,
        mul_ln400,
        IMG1_data_address0,
        IMG1_data_ce0,
        IMG1_data_q0,
        mul_ln409,
        SUM1_data_address0,
        SUM1_data_ce0,
        SUM1_data_we0,
        SUM1_data_d0,
        SUM1_data_address1,
        SUM1_data_ce1,
        SUM1_data_q1,
        SQSUM1_data_address0,
        SQSUM1_data_ce0,
        SQSUM1_data_we0,
        SQSUM1_data_d0,
        SQSUM1_data_address1,
        SQSUM1_data_ce1,
        SQSUM1_data_q1,
        y
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] sum_col;
input  [16:0] mul_ln400;
output  [16:0] IMG1_data_address0;
output   IMG1_data_ce0;
input  [7:0] IMG1_data_q0;
input  [16:0] mul_ln409;
output  [16:0] SUM1_data_address0;
output   SUM1_data_ce0;
output   SUM1_data_we0;
output  [31:0] SUM1_data_d0;
output  [16:0] SUM1_data_address1;
output   SUM1_data_ce1;
input  [31:0] SUM1_data_q1;
output  [16:0] SQSUM1_data_address0;
output   SQSUM1_data_ce0;
output   SQSUM1_data_we0;
output  [31:0] SQSUM1_data_d0;
output  [16:0] SQSUM1_data_address1;
output   SQSUM1_data_ce1;
input  [31:0] SQSUM1_data_q1;
input  [30:0] y;

reg ap_idle;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln398_fu_169_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] cmp9_i_fu_141_p2;
reg   [0:0] cmp9_i_reg_291;
wire   [63:0] zext_ln400_fu_187_p1;
reg   [63:0] zext_ln400_reg_301;
reg   [63:0] zext_ln400_reg_301_pp0_iter1_reg;
reg   [63:0] zext_ln400_reg_301_pp0_iter2_reg;
reg   [63:0] zext_ln400_reg_301_pp0_iter3_reg;
reg   [63:0] zext_ln400_reg_301_pp0_iter4_reg;
wire   [63:0] zext_ln409_fu_198_p1;
reg   [63:0] zext_ln409_reg_312;
reg   [63:0] zext_ln409_reg_312_pp0_iter1_reg;
reg   [63:0] zext_ln409_reg_312_pp0_iter2_reg;
reg   [7:0] it_reg_322;
wire   [15:0] zext_ln402_1_fu_208_p1;
reg   [31:0] SUM1_data_load_reg_333;
wire   [31:0] t_2_fu_229_p3;
reg   [31:0] t_2_reg_338;
wire   [31:0] tq_2_fu_249_p3;
reg   [31:0] tq_2_reg_353;
wire    ap_block_pp0_stage0;
reg   [31:0] s_fu_42;
wire   [31:0] t_fu_218_p2;
wire    ap_loop_init;
reg   [31:0] sq_fu_46;
wire   [31:0] grp_fu_259_p3;
reg   [31:0] ap_sig_allocacmp_sq_load;
reg   [16:0] x_fu_50;
wire   [16:0] add_ln398_fu_175_p2;
reg   [16:0] ap_sig_allocacmp_x_1;
reg    IMG1_data_ce0_local;
reg    SUM1_data_ce1_local;
reg    SUM1_data_we0_local;
reg    SUM1_data_ce0_local;
reg    SQSUM1_data_ce1_local;
reg    SQSUM1_data_we0_local;
reg    SQSUM1_data_ce0_local;
wire   [31:0] zext_ln398_fu_165_p1;
wire   [16:0] add_ln400_fu_181_p2;
wire   [16:0] add_ln409_fu_192_p2;
wire   [31:0] zext_ln402_fu_215_p1;
wire   [31:0] t_1_fu_224_p2;
(* use_dsp48 = "no" *) wire   [31:0] tq_1_fu_244_p2;
wire   [7:0] grp_fu_259_p0;
wire   [7:0] grp_fu_259_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 s_fu_42 = 32'd0;
#0 sq_fu_46 = 32'd0;
#0 x_fu_50 = 17'd0;
#0 ap_done_reg = 1'b0;
end

detectFaces_mac_muladd_8ns_8ns_32ns_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mac_muladd_8ns_8ns_32ns_32_4_1_U14(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_259_p0),
    .din1(grp_fu_259_p1),
    .din2(ap_sig_allocacmp_sq_load),
    .ce(1'b1),
    .dout(grp_fu_259_p3)
);

detectFaces_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            s_fu_42 <= 32'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            s_fu_42 <= t_fu_218_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            sq_fu_46 <= 32'd0;
        end else if ((ap_enable_reg_pp0_iter4 == 1'b1)) begin
            sq_fu_46 <= grp_fu_259_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln398_fu_169_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            x_fu_50 <= add_ln398_fu_175_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            x_fu_50 <= 17'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        SUM1_data_load_reg_333 <= SUM1_data_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        cmp9_i_reg_291 <= cmp9_i_fu_141_p2;
        it_reg_322 <= IMG1_data_q0;
        zext_ln400_reg_301[16 : 0] <= zext_ln400_fu_187_p1[16 : 0];
        zext_ln400_reg_301_pp0_iter1_reg[16 : 0] <= zext_ln400_reg_301[16 : 0];
        zext_ln409_reg_312[16 : 0] <= zext_ln409_fu_198_p1[16 : 0];
        zext_ln409_reg_312_pp0_iter1_reg[16 : 0] <= zext_ln409_reg_312[16 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        t_2_reg_338 <= t_2_fu_229_p3;
        tq_2_reg_353 <= tq_2_fu_249_p3;
        zext_ln400_reg_301_pp0_iter2_reg[16 : 0] <= zext_ln400_reg_301_pp0_iter1_reg[16 : 0];
        zext_ln400_reg_301_pp0_iter3_reg[16 : 0] <= zext_ln400_reg_301_pp0_iter2_reg[16 : 0];
        zext_ln400_reg_301_pp0_iter4_reg[16 : 0] <= zext_ln400_reg_301_pp0_iter3_reg[16 : 0];
        zext_ln409_reg_312_pp0_iter2_reg[16 : 0] <= zext_ln409_reg_312_pp0_iter1_reg[16 : 0];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        IMG1_data_ce0_local = 1'b1;
    end else begin
        IMG1_data_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        SQSUM1_data_ce0_local = 1'b1;
    end else begin
        SQSUM1_data_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        SQSUM1_data_ce1_local = 1'b1;
    end else begin
        SQSUM1_data_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        SQSUM1_data_we0_local = 1'b1;
    end else begin
        SQSUM1_data_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        SUM1_data_ce0_local = 1'b1;
    end else begin
        SUM1_data_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        SUM1_data_ce1_local = 1'b1;
    end else begin
        SUM1_data_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        SUM1_data_we0_local = 1'b1;
    end else begin
        SUM1_data_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln398_fu_169_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        ap_sig_allocacmp_sq_load = grp_fu_259_p3;
    end else begin
        ap_sig_allocacmp_sq_load = sq_fu_46;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_x_1 = 17'd0;
    end else begin
        ap_sig_allocacmp_x_1 = x_fu_50;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign IMG1_data_address0 = zext_ln400_fu_187_p1;

assign IMG1_data_ce0 = IMG1_data_ce0_local;

assign SQSUM1_data_address0 = zext_ln400_reg_301_pp0_iter4_reg;

assign SQSUM1_data_address1 = zext_ln409_reg_312_pp0_iter2_reg;

assign SQSUM1_data_ce0 = SQSUM1_data_ce0_local;

assign SQSUM1_data_ce1 = SQSUM1_data_ce1_local;

assign SQSUM1_data_d0 = tq_2_reg_353;

assign SQSUM1_data_we0 = SQSUM1_data_we0_local;

assign SUM1_data_address0 = zext_ln400_reg_301_pp0_iter2_reg;

assign SUM1_data_address1 = zext_ln409_fu_198_p1;

assign SUM1_data_ce0 = SUM1_data_ce0_local;

assign SUM1_data_ce1 = SUM1_data_ce1_local;

assign SUM1_data_d0 = t_2_reg_338;

assign SUM1_data_we0 = SUM1_data_we0_local;

assign add_ln398_fu_175_p2 = (ap_sig_allocacmp_x_1 + 17'd1);

assign add_ln400_fu_181_p2 = (mul_ln400 + ap_sig_allocacmp_x_1);

assign add_ln409_fu_192_p2 = (mul_ln409 + ap_sig_allocacmp_x_1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign cmp9_i_fu_141_p2 = ((y == 31'd0) ? 1'b1 : 1'b0);

assign grp_fu_259_p0 = zext_ln402_1_fu_208_p1;

assign grp_fu_259_p1 = zext_ln402_1_fu_208_p1;

assign icmp_ln398_fu_169_p2 = (($signed(zext_ln398_fu_165_p1) < $signed(sum_col)) ? 1'b1 : 1'b0);

assign t_1_fu_224_p2 = (SUM1_data_load_reg_333 + t_fu_218_p2);

assign t_2_fu_229_p3 = ((cmp9_i_reg_291[0:0] == 1'b1) ? t_fu_218_p2 : t_1_fu_224_p2);

assign t_fu_218_p2 = (zext_ln402_fu_215_p1 + s_fu_42);

assign tq_1_fu_244_p2 = (SQSUM1_data_q1 + grp_fu_259_p3);

assign tq_2_fu_249_p3 = ((cmp9_i_reg_291[0:0] == 1'b1) ? grp_fu_259_p3 : tq_1_fu_244_p2);

assign zext_ln398_fu_165_p1 = ap_sig_allocacmp_x_1;

assign zext_ln400_fu_187_p1 = add_ln400_fu_181_p2;

assign zext_ln402_1_fu_208_p1 = IMG1_data_q0;

assign zext_ln402_fu_215_p1 = it_reg_322;

assign zext_ln409_fu_198_p1 = add_ln409_fu_192_p2;

always @ (posedge ap_clk) begin
    zext_ln400_reg_301[63:17] <= 47'b00000000000000000000000000000000000000000000000;
    zext_ln400_reg_301_pp0_iter1_reg[63:17] <= 47'b00000000000000000000000000000000000000000000000;
    zext_ln400_reg_301_pp0_iter2_reg[63:17] <= 47'b00000000000000000000000000000000000000000000000;
    zext_ln400_reg_301_pp0_iter3_reg[63:17] <= 47'b00000000000000000000000000000000000000000000000;
    zext_ln400_reg_301_pp0_iter4_reg[63:17] <= 47'b00000000000000000000000000000000000000000000000;
    zext_ln409_reg_312[63:17] <= 47'b00000000000000000000000000000000000000000000000;
    zext_ln409_reg_312_pp0_iter1_reg[63:17] <= 47'b00000000000000000000000000000000000000000000000;
    zext_ln409_reg_312_pp0_iter2_reg[63:17] <= 47'b00000000000000000000000000000000000000000000000;
end

endmodule //detectFaces_processImage_Pipeline_VITIS_LOOP_398_2
